domain {
    /*
    A ControllableElement is everything which can be controlled,
    e.g. a group, a device or a led.
    */
    export abstract valoplus.ControllableElement {
        String name
    }

    /*
    A Group can contain all kind of ControllableElement. It is only stored
    on the Base.
    */
    valoplus.Group : ControllableElement {
        Collection<ControllableElement> members #validate {
        	hierarchy(controllable)
        }
    }

    /*
    A Device is a physical controller. This object stores all of its configuration
    */
    abstract valoplus.Device : ControllableElement {
        String ip
        String key
        Integer maxChannel
        Boolean isConfigured
        Collection<ChannelElement> elements
    }

    /*
    A master can be accessed by the client
    */
    valoplus.Master : Device {
        String password
    }

    /*
    A Slave is a device managed by the master.
    */
    valoplus.Slave : Device {

    }

    /*
    A ChannelElement is an element connected direct to the Device.
    */
    abstract valoplus.ChannelElement : ControllableElement {
    }

    valoplus.AdressableRgbLed : ChannelElement {
        StateAdressableRgbLed stateAdressableRgbLed
        Integer channelId
        Integer ledCount
    }

    valoplus.SingleColorLed : ChannelElement {
        Integer channelId
    }

    valoplus.RgbLed : ChannelElement {
        Integer channelIdRed
        Integer channelIdGreen
        Integer channelIdBlue
    }

    /*
    The State contains the information if a ChannelElement is active.
    Also detailed information like actual colors can be stored.
    */
    abstract valoplus.State {
        Boolean active
    }

    valoplus.StateAdressableRgbLed : State {
        Integer brightness
    }
}
service {
	/*
	Service to access the states of the ControllableElements.
	*/
	export valoplus.ControllService {
        /*
        Toggle the state of the ControllableElement. As the Result the state of theElement is changed.
        */
		Unit ControllableElement.toggle()
	}

    export valoplus.TimingEventsService {
        Unit ControllableElement.createTimedEvent()
    }

    /*
    Service to edit the hierarchy.
    */
    export valoplus.EditService {
        Repository ControllableElement

        Unit Device.addChannelElement(ChannelElement channel)
		Unit ControllableElement.addToGroup(Group group)
		Unit Group.addElements(Collection<ControllableElement> element)
    }
}
